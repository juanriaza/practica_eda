import greenfoot.*;  // (World, Actor, GreenfootImage, Greenfoot and MouseInfo)

import java.util.List;
import java.util.LinkedList;


/**
 * Write a description of class CardRow here.
 * 
 * @author Felipe I. Anfurrutia
 * @version 29/10/2011
 */
public class CardRow  extends Actor implements Accepter
{
    private List<Card> cards;
    private Card.Suit suit;
    
    public CardRow(){
        cards = new LinkedList<Card>();
    }
    
    /**
     * Adds the cardRow without cards
     */
    public void addedToWorld(World world){
        setImage("images/cards/empty.png");
        int expand = 440;
        int middle = (expand-getImage().getWidth()) / 2;
        GreenfootImage image = new GreenfootImage(getImage().getWidth()+expand, getImage().getHeight());
        image.drawImage(new GreenfootImage("images/cards/empty.png"), middle, 0);
        image.drawRect( 0, 0, expand, image.getHeight()-1);
        setImage(image);
    }
    
    /**
     * Determina si la fila esta complenta
     * @return True si la fila est� completa y False, en caso contrario
     */
    public boolean isCompleted(){
        return cards.size() == 13;
    }

    /**
     * Add a card if it's legal.
     * @return True if the card has been added, and False if it's been rejected.
     */
    public boolean addCard(Card card){
        //To-DO: verifica si se cumplen las restricciones y/o las reglas del juego que se comentan en la descipci�n de la pr�cica. En base a eso se decide aceptar o denegar
        Player pAux = (Player)card.getAccepter();
        if (pAux.canSelect(card) && card.getAccepter() instanceof Player){
            if (cards.isEmpty()){
            
                 if (card.getValue() == Card.Value.SIX){
                     add(card,0);
                     return true;
                    }
            }
                //si son del mismo palo
                else if (card.getSuit() == cards.get(0).getSuit()){
                   //si el valor de la carta es uno menos que el de la primera carta la añadimos al principio
                   if (card.getValue().ordinal() == (cards.get(0).getValue().ordinal()-1)){
                       add(card,0);
                       return true;
                    } 
                    //si el valor de la carta es uno mas que el de la ultima carta la añadimos al final
                    else if(card.getValue().ordinal() == (cards.get((cards.size()-1)).getValue().ordinal()+1)) {
                        add(card);
                        return true;
                    }
        }
    }
    return false;
}
    
    /**
     * Adds a card on the structure of data and place on the table
     */    
    private void add(Card card, int pos){
        //añade una carta  al inicio de la fila (siempre se le pasa la posicion 0 y desplaza a la derecha)
        cards.add(pos,card);
        card.setDraggable(false);
        placeCard(card);
        
    }
        //añade una carta al final de la fila (row)
    private void add(Card card){
        cards.add(card);
        card.setDraggable(false);
        placeCard(card);
    }
    
    /**
     * Coloca la carta en la fila de la mesa
     */
    private void placeCard(Card card){
        int x = getX(); 
        int y = getY();
        int dif;
        if (card.getValue() == Card.Value.SIX)
            x = x - 35;
            card.reAdd();
        else if (card.getValue().ordinal() >= Card.Value.SEVEN.ordinal()){
            dif = card.getValue().ordinal() - Card.Value.SEVEN.ordinal();
            x = x + 35 + dif*15;
            card.reAdd();
        }
        else {
            dif = Card.Value.SEVEN.ordinal() - card.getValue().ordinal();
            x = x - 75 - dif*15;
            card.reAdd();
        }
        card.setLocation(x,y);
        card.setRotation(0);
       
    }
      
}
